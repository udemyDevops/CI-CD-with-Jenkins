// change the file name to Jenkinsfile and update the values before using this

pipeline {
    agent any
    tools {
        maven "MAVEN3.9"
        jdk "JDK17"
    }


    environment { // update the values
        registryCredential = 'ecr:us-east-1:awscreds' // 'awscreds' is the credential name stored in jenkins and should be passed in this format (<service>:<region of service>:<credentialname>) which the docker plugin will use to login to AWS
        appRegistry = "716657688884.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg" // URI of ECR repository
        vprofileRegistry = "https://716657688884.dkr.ecr.us-east-1.amazonaws.com" // https://<ECR URI without the repository name>
        cluster = "cluster name"  // name of ECS cluster
        service = "service name"  // service name in ECS cluster -- Service in ECS cluster is a task that fetch the image from ECR and run the container. We cac also add load balancer (ELB) in the service
    }
    stages {
    
        stage('Fetch code') {
            steps {
              git branch: 'docker', url: 'https://github.com/hkhcoder/vprofile-project.git'
              //  git branch: 'main', url: 'https://github.com/udemyDevops/CI-CD-with-Jenkins.git'
            }

        }


        stage('Build'){
            steps{
              sh 'mvn install -DskipTests'
            }

            post {
              success {
                  echo 'Now Archiving it...'
                  archiveArtifacts artifacts: '**/target/*.war'
              }
            }
        }

        stage('UNIT TEST') {
            steps{
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis') {
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage("Sonar Code Analysis") {
            environment {
                scannerHome = tool 'sonar6.2'
            }
            steps {
              withSonarQubeEnv('sonarserver') {
                sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                  -Dsonar.projectName=vprofile \
                  -Dsonar.projectVersion=1.0 \
                  -Dsonar.sources=src/ \
                  -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                  -Dsonar.junit.reportsPath=target/surefire-reports/ \
                  -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                  -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }

        stage("Quality Gate") {
            steps {
              timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
              }
            }
          }

        stage('Build App Image') {
          steps {
      
            script {
                dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                // dockerImage = docker.build( appRegistry + ":$BUILD_NUMBER", "./Docker-CI-CD/Docker-files/app/multistage/")
                // here docker is the plugin which needs to be installed in jenkins
                // build is the function and 'appRegistry' is variable declared in environment block above
                // $BUILD_NUMBER to add the tag for docker image
                // ./Docker-files/app/multistage/ --> path of Dockerfile
            }
          }
    
        }

        stage('Upload App Image') {
          steps{
            script {
              docker.withRegistry( vprofileRegistry, registryCredential ) {
                dockerImage.push("$BUILD_NUMBER")
                dockerImage.push('latest')
                // vprofileRegistry, registryCredential are variables declared in environment block above
                // docker is plugin and 'withRegistry' and 'push' are functions
              }
            }
          }
        }

        stage('Remove Container Images'){
            steps{
                sh 'docker rmi -f $(docker images -a -q)'
            }
        }
        // The image is uploaded to ECR but also exist in Jenkins, so we need to another stage to remove the image from Jenkins after the upload to ECR is completed

        stage('Deploy to ecs') {
          steps {
            withAWS(credentials: 'awscreds', region: 'us-east-1') {   
            // withAWS is the plugin (plugin name --> pipeline: aws steps) to be installed in jenkins which will use the credentials and region to execute the AWS CLI command (AWS CLI already installed in Jenkins server --> refer Steps for docker CI in Jenkins in  'CI-CD-with-Jenkins/Docker-CI-CD/Jenkinsfile-for-docker-CICD CI-CD-with-Jenkins/Docker-CI-CD/docker-PaaC.md') 
            // 'awscreds' and 'us-east-1' -- credential name created in jenkins and the region where the ECS is created
            sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
               }
          }
        }

    }
}