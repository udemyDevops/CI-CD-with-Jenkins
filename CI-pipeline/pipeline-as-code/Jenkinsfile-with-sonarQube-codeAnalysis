// change the file name to Jenkinsfile and update the values in stages before using this
pipeline {
	agent any  // run on any agent including master

	// To select the agent, use the below block
	// agent {
	// 	label "Master"
	// }

	tools {  // Names of the tools should be same as added in jenkins tools configuration
	    maven "MAVEN3.9"	// maven is the tool and MAVEN3.9 is the name added in tool configuration
	    jdk "JDK17"
	}

	stages {
	    stage('Fetch code') { // in steps we can mention the plugin or shell command to execute....
            steps { // git is the plugin used in this step
				// to write the git plugin refer documentaion 'https://www.jenkins.io/doc/pipeline/steps/git/'
               git branch: 'atom', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }

	    }


	    stage('Build'){
	        steps{
				// mvn install will execute all the phases including the tests done in previous stage, so using the skipTests option the test will be skipped as the test is already done in previous stage (in this example)
	           sh 'mvn install -DskipTests' // any maven option to pass put -D and without space add the option
	        }

	        post {
	           success {
	              echo 'Now Archiving it...'
	              archiveArtifacts artifacts: '**/target/*.war'  // archiveArtifacts is the plugin name and 'artifacts:' is the parameter/option and the path is its value
	           }
	        }
	    }

        stage('UNIT TEST') {
            steps{ // shell command is executed in this step
                sh 'mvn test'
            }
        }

        stage('Checkstyle analysis') {
            steps{ // shell command is executed in this step
                sh 'mvn checkstyle:checkstyle' // maven will run the code analysis by using chekstyle plugin. It will download the checkstyle dependency, run the analysis and generate the report
            }
        }

		stage("SonarQube code analysis") {
			environment { // environment variable for this stage to use the sonar scanner tool installed in jenkins. Can also declare it as a global variable as a separate block
				scannerHome = tool 'sonar6.2' // scannerHome is variable name and 'sonar6.2' is the name given for tool installed in jenkins, replace it if used a different name while installing in jenkins
			}
            steps {
              withSonarQubeEnv('My SonarQube Server') { // replace with the name given for sonarqube server in Jenkins Dashboard > manage > system
                // sh 'mvn clean package sonar:sonar' // maven will run the sonar by downloading the dependency but for this practice we wll run the scanner through CLI. The sonar scanner tool installed in jenkins will give a CLI
				// for multi-line commands using 'sh' --> should use tripple quotes
				sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
          }

	    
	}	
}
